/*!
 * cdp.nativebridge.js 1.2.0-dev
 *
 * Date: 2016-04-07T10:08:06
 */
!function(a,b){"function"==typeof define&&define.amd?define(["cdp.promise"],function(){return b(a.CDP||(a.CDP={}),a.jQuery||a.$)}):"object"==typeof exports?module.exports=b(require("cdp.promise"),require("jquery")):b(a.CDP||(a.CDP={}),a.jQuery||a.$)}((this||0).self||global,function(a,b){a.NativeBridge=a.NativeBridge||{};var a;!function(a){var c;!function(c){var d="[CDP.NativeBridge.Utils] ",e=function(){function e(){}return e.defineResultCode=function(b){Object.defineProperty(c,b,{get:function(){return e.s_pluginReady?a.Plugin.NativeBridge[b]:null},enumerable:!0,configurable:!0})},e.waitForPluginReady=function(){var c=b.Deferred();if(e.s_pluginReady)return b.Deferred().resolve();try{var f=cordova.require("cordova/channel");f.onCordovaReady.subscribe(function(){null!=a.Plugin.NativeBridge?(e.s_pluginReady=!0,c.resolve()):(console.error(d+"'cordova-plugin-cdp-nativebridge' cordova plugin required."),c.reject())})}catch(g){console.error(d+"cordova required."),c.reject()}return c.promise()},e.makePromise=function(c){return a.makePromise(c,{_bridge:null,_taskId:null,abort:function(a){var e=this,f=b.extend({message:"abort"},a),g=function(){null!=e._bridge&&null!=e._taskId&&e._bridge.cancel(e._taskId,f),c.reject(f)};null!=this.dependency?(this.dependency.abort?this.dependency.abort(f):console.error(d+"[call] dependency object doesn't have 'abort()' method."),this.callReject&&"pending"===this.state()&&g()):"pending"===this.state()&&g()}})},e.extend=function(a,c){var d,e=this;d=a&&a.hasOwnProperty("constructor")?a.constructor:function(){return e.apply(this,arguments)},b.extend(d,e,c);var f=function(){this.constructor=d};return f.prototype=e.prototype,d.prototype=new f,a&&b.extend(d.prototype,a),d.__super__=e.prototype,d},e.s_pluginReady=!1,e}();c.Utils=e}(c=a.NativeBridge||(a.NativeBridge={}))}(a||(a={}));var a;return function(a){var c;!function(c){var d="[CDP.NativeBridge.Gate] ";c.Utils.defineResultCode("SUCCESS_OK"),c.Utils.defineResultCode("SUCCESS_PROGRESS"),c.Utils.defineResultCode("ERROR_FAIL"),c.Utils.defineResultCode("ERROR_CANCEL"),c.Utils.defineResultCode("ERROR_INVALID_ARG"),c.Utils.defineResultCode("ERROR_NOT_IMPLEMENT"),c.Utils.defineResultCode("ERROR_NOT_SUPPORT"),c.Utils.defineResultCode("ERROR_INVALID_OPERATION"),c.Utils.defineResultCode("ERROR_CLASS_NOT_FOUND"),c.Utils.defineResultCode("ERROR_METHOD_NOT_FOUND");var e=function(){function e(b,e){var f=this;c.Utils.waitForPluginReady().then(function(){f._bridge=new a.Plugin.NativeBridge(b,e)}).fail(function(){throw Error(d+"'cordova-plugin-cdp-nativebridge' required.")})}return e.prototype.exec=function(a,d,e){var f=this,g=b.Deferred(),h=c.Utils.makePromise(g);return c.Utils.waitForPluginReady().then(function(){var b=f._bridge.exec(function(a){c.SUCCESS_PROGRESS===a.code?g.notify(a):g.resolve(a)},function(a){g.reject(a)},a,d,e);h._bridge=f._bridge,h._taskId=b}).fail(function(){g.reject(f.makeFatal())}),h},e.prototype.cancel=function(a){var d=this,e=b.Deferred();return c.Utils.waitForPluginReady().then(function(){d._bridge.cancel(null,a,function(a){e.resolve(a)},function(a){e.reject(a)})}).fail(function(){e.reject(d.makeFatal())}),e.promise()},e.prototype.dispose=function(a){var d=this,e=b.Deferred();return c.Utils.waitForPluginReady().then(function(){d._bridge.dispose(a,function(a){e.resolve(a)},function(a){e.reject(a)})}).fail(function(){e.reject(d.makeFatal())}),e.promise()},Object.defineProperty(e.prototype,"bridge",{get:function(){return this._bridge},enumerable:!0,configurable:!0}),e.prototype.makeFatal=function(){var a=d+"fatal error. 'cordova-plugin-cdp-nativebridge' is not available.";return console.error(a),{code:null,name:d+"ERROR_FATAL",message:a}},e.extend=c.Utils.extend,e}();c.Gate=e}(c=a.NativeBridge||(a.NativeBridge={}))}(a||(a={})),a.NativeBridge});
//# sourceMappingURL=cdp.nativebridge-1.2.0-dev.min.map