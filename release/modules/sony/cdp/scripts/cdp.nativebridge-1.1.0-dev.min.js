/*!
 * cdp.nativebridge.js 1.1.0-dev
 *
 * Date: 2015-12-24T17:37:35
 */
!function(a,b){"function"==typeof define&&define.amd?
// AMD
define(["cdp.promise"],function(){return b(a.CDP||(a.CDP={}),a.jQuery||a.$)}):"object"==typeof exports?
// CommonJS
module.exports=b(require("cdp.promise"),require("jquery")):
// Browser globals
b(a.CDP||(a.CDP={}),a.jQuery||a.$)}((this||0).self||global,function(a,b){a.NativeBridge=a.NativeBridge||{};var a;!function(a){var c;!function(c){var d="[CDP.NativeBridge.Utils] ",e=function(){function e(){}
///////////////////////////////////////////////////////////////////////
// public static methods
/**
             * \~english
             * Defines error code map from the plugin result to CDP.NativeBridge result code.
             *
             * @param errorCode {String} [in] set result code string. ex): "SUCCESS_OK"
             *
             * \~japanese
             * plugin の Result Code を CDP.NativeBridge にマップする
             *
             * @param errorCode {String} [in] Result Code 文字列を指定 ex): "SUCCESS_OK"
             */
/**
             * \~english
             * Wait for cordova "deviceready" event fired.
             *
             * \~japanese
             * cordova が 使用可能になるまで待機
             */
/**
             * \~english
             * Create NativeBridge.Promise object from jQueryDeferred object.
             *
             * @param df {JQueryDeferred} [in] set jQueryDeferred instance.
             * @return   {Promise} NativeBridge.Promise object.
             *
             * \~japanese
             * Promise オブジェクトの作成
             * jQueryDeferred オブジェクトから、NativeBridge.Promise オブジェクトを作成する
             *
             * @param df {JQueryDeferred} [in] jQueryDeferred instance を指定
             * @return   {Promise} NativeBridge.Promise オブジェクト
             */
/**
             * \~english
             * Helper function to correctly set up the prototype chain, for subclasses.
             * The function behavior is same as extend() function of Backbone.js.
             *
             * @param protoProps  {Object} [in] set prototype properties as object.
             * @param staticProps {Object} [in] set static properties as object.
             * @return {Object} subclass constructor.
             *
             * \~japanese
             * クラス継承のためのヘルパー関数
             * Backbone.js extend() 関数と同等
             *
             * @param protoProps  {Object} [in] prototype properties をオブジェクトで指定
             * @param staticProps {Object} [in] static properties をオブジェクトで指定
             * @return {Object} サブクラスのコンストラクタ
             */
return e.defineResultCode=function(b){Object.defineProperty(c,b,{get:function(){return e.s_pluginReady?a.Plugin.NativeBridge[b]:null},enumerable:!0,configurable:!0})},e.waitForPluginReady=function(){var c=b.Deferred();if(e.s_pluginReady)return b.Deferred().resolve();try{var f=cordova.require("cordova/channel");f.onCordovaReady.subscribe(function(){null!=a.Plugin.NativeBridge?(e.s_pluginReady=!0,c.resolve()):(console.error(d+"'com.sony.cdp.plugin.nativebridge' cordova plugin required."),c.reject())})}catch(g){console.error(d+"cordova required."),c.reject()}return c.promise()},e.makePromise=function(c){return a.makePromise(c,{_bridge:null,_taskId:null,abort:function(a){var e=this,f=b.extend({message:"abort"},a),g=function(){null!=e._bridge&&null!=e._taskId&&e._bridge.cancel(e._taskId,f),c.reject(f)};null!=this.dependency?(this.dependency.abort?this.dependency.abort(f):console.error(d+"[call] dependency object doesn't have 'abort()' method."),this.callReject&&"pending"===this.state()&&g()):"pending"===this.state()&&g()}})},e.extend=function(a,c){var d,e=this;d=a&&a.hasOwnProperty("constructor")?a.constructor:function(){return e.apply(this,arguments)},b.extend(d,e,c);var f=function(){this.constructor=d};return f.prototype=e.prototype,d.prototype=new f,a&&b.extend(d.prototype,a),d.__super__=e.prototype,d},e.s_pluginReady=!1,e}();c.Utils=e}(c=a.NativeBridge||(a.NativeBridge={}))}(a||(a={}));var a;return function(a){var c;!function(c){var d="[CDP.NativeBridge.Gate] ";c.Utils.defineResultCode("SUCCESS_OK"),c.Utils.defineResultCode("SUCCESS_PROGRESS"),c.Utils.defineResultCode("ERROR_FAIL"),c.Utils.defineResultCode("ERROR_CANCEL"),c.Utils.defineResultCode("ERROR_INVALID_ARG"),c.Utils.defineResultCode("ERROR_NOT_IMPLEMENT"),c.Utils.defineResultCode("ERROR_NOT_SUPPORT"),c.Utils.defineResultCode("ERROR_INVALID_OPERATION"),c.Utils.defineResultCode("ERROR_CLASS_NOT_FOUND"),c.Utils.defineResultCode("ERROR_METHOD_NOT_FOUND");
//___________________________________________________________________________________________________________________//
/**
         * \~english
         * @class Gate
         * @brief The base class for NativeBridge communication.
         *        You can derive any Gate class from this class.
         *
         * \~japanese
         * @class Gate
         * @brief NativeBridge と通信するベースクラス
         *        このクラスから任意の Gate クラスを派生して実装可能
         */
var e=function(){/**
             * \~english
             * constructor
             *
             * @param feature {Feature}          [in] feature information.
             * @param options {ConstructOptions} [in] construction options.
             *
             * \~japanese
             * constructor
             *
             * @param feature {Feature}          [in] 初期化情報を指定
             * @param options {ConstructOptions} [in] オプションを指定
             */
function e(b,e){var f=this;c.Utils.waitForPluginReady().then(function(){f._bridge=new a.Plugin.NativeBridge(b,e)}).fail(function(){throw Error(d+"'com.sony.cdp.plugin.nativebridge' required.")})}
///////////////////////////////////////////////////////////////////////
// override methods
/**
             * \~english
             * Execute task.
             * the function calls the Native class method from correspondent method name.
             *
             * @param method  {String}       [in] method name of Native class
             * @param args    {Object[]}     [in] set arguments by array type.
             * @param options {ExecOptions?} [in] set exec options.
             * @return {Promise} NativeBridge.Promise object.
             *
             * \~japanese
             * タスクの実行
             * 指定した method 名に対応する Native Class の method を呼び出す。
             *
             * @param method  {String}       [in] Native Class のメソッド名を指定
             * @param args    {Object[]}     [in] 引数を配列で指定
             * @param options {ExecOptions?} [in] 実行オプションを指定
             * @return {Promise} NativeBridge.Promise オブジェクト
             */
/**
             * \~english
             * Cancel all tasks.
             *
             * @param options {ExecOptions?} [in] set execute options.
             * @return {jQueryPromise} jQuery.Promise object.
             *
             * \~japanese
             * すべてのタスクのキャンセル
             *
             * @param options {ExecOptions?} [in] 実行オプションを指定
             * @return {jQueryPromise} jQuery.Promise オブジェクト
             */
/**
             * \~english
             * Destruction for the instance.
             * release Native class reference. after that, exec() becomes invalid.
             *
             * @param options {ExecOptions?} [in] set execute options.
             * @return {jQueryPromise} jQuery.Promise object.
             *
             * \~japanese
             * インスタンスの破棄
             * Native の参照を解除する。以降、exec は無効となる。
             *
             * @param options {ExecOptions?} [in] 実行オプションを指定
             * @return {jQueryPromise} jQuery.Promise オブジェクト
             */
///////////////////////////////////////////////////////////////////////
// private methods
// Make fatal error object.
// For pure javascript extend helper.
return e.prototype.exec=function(a,d,e){var f=this,g=b.Deferred(),h=c.Utils.makePromise(g);return c.Utils.waitForPluginReady().then(function(){var b=f._bridge.exec(function(a){c.SUCCESS_PROGRESS===a.code?g.notify(a):g.resolve(a)},function(a){g.reject(a)},a,d,e);
// set internal properties.
h._bridge=f._bridge,h._taskId=b}).fail(function(){g.reject(f.makeFatal())}),h},e.prototype.cancel=function(a){var d=this,e=b.Deferred();return c.Utils.waitForPluginReady().then(function(){d._bridge.cancel(null,a,function(a){e.resolve(a)},function(a){e.reject(a)})}).fail(function(){e.reject(d.makeFatal())}),e.promise()},e.prototype.dispose=function(a){var d=this,e=b.Deferred();return c.Utils.waitForPluginReady().then(function(){d._bridge.dispose(a,function(a){e.resolve(a)},function(a){e.reject(a)})}).fail(function(){e.reject(d.makeFatal())}),e.promise()},Object.defineProperty(e.prototype,"bridge",{
///////////////////////////////////////////////////////////////////////
// protected methods
/**
                 * \~english
                 * Access to Plugin.NativeBridge object.
                 * If you want to use low level exec(), you can use this accessor.
                 *
                 * @return {Plugin.NativeBridge} Plugin.NativeBridge instance.
                 *
                 * \~japanese
                 * Plugin.NativeBridge オブジェクトへのアクセス
                 * 低レベル exec() を使用したい場合に利用可能
                 *
                 * @return {Plugin.NativeBridge} Plugin.NativeBridge インスタンス.
                 */
get:function(){return this._bridge},enumerable:!0,configurable:!0}),e.prototype.makeFatal=function(){var a=d+"fatal error. 'com.sony.cdp.plugin.nativebridge' is not available.";return console.error(a),{code:null,name:d+"ERROR_FATAL",message:a}},e.extend=c.Utils.extend,e}();c.Gate=e}(c=a.NativeBridge||(a.NativeBridge={}))}(a||(a={})),a.NativeBridge});
//# sourceMappingURL=cdp.nativebridge-1.1.0-dev.min.map