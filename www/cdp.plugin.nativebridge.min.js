/*!
 * cdp.plugin.nativebridge.js 1.1.0-dev
 *
 * Date: 2016-01-05T10:22:58
 */
var CDP;!function(a){var b;!function(a){var b;!function(a){/**
             * \~english
             * @class Patch
             * @brief Utility class to apply patch code to the cordova instance.
             *
             * \~japanese
             * @class Patch
             * @brief cordova 本体への Patch を扱うユーティリティクラス
             */
var b=function(){function a(){}
///////////////////////////////////////////////////////////////////////
// public static methods
/**
                 * \~english
                 * "backbutton" event is handled with priority.
                 *
                 * \~japanese
                 * "backbutton" イベントを優先的に扱う
                 */
return a.setBackButtonPriority=function(b){"undefined"!=typeof cordova&&(b?(null==a.s_fireDocumentEventOrg&&(a.s_fireDocumentEventOrg=cordova.fireDocumentEvent),cordova.fireDocumentEvent=function(b,c,d){"backbutton"===b?a.s_fireDocumentEventOrg(b,c,!0):a.s_fireDocumentEventOrg(b,c,d)}):null!=a.s_fireDocumentEventOrg&&(cordova.fireDocumentEvent=a.s_fireDocumentEventOrg,a.s_fireDocumentEventOrg=null))},a}();a.Patch=b}(b=a._NativeBridge||(a._NativeBridge={}))}(b=a.Plugin||(a.Plugin={}))}(CDP||(CDP={}));/* tslint:disable:max-line-length forin */
var CDP;!function(a){var b;!function(a){var b="[CDP.Plugin.NativeBridge] ",c=cordova.require("cordova/utils"),d=function(){/**
             * \~english
             * constructor
             *
             * @param feature {Feature}           [in] feature information.
             * @param options {ConstructOptions?} [in] construction options.
             *
             * \~japanese
             * constructor
             *
             * @param feature {Feature}           [in] 機能情報
             * @param options {ConstructOptions?} [in] オプション情報
             */
function d(a,b){return this instanceof d?(this._feature=a,this._objectId="object:"+c.createUUID(),void(this._execTaskHistory={})):new d(a,b)}
///////////////////////////////////////////////////////////////////////
// public methods
/**
             * \~english
             * Execute task.
             * the function calls the Native class method from correspondent method name.
             *
             * @param success {Function}     [in] success callback.
             * @param fail    {Function}     [in] fail callback.
             * @param method  {String}       [in] method name of Native class
             * @param args    {Object[]}     [in] set arguments by array type.
             * @param options {ExecOptions?} [in] set exec options.
             * @return task ID {String}
             *
             * \~japanese
             * タスクの実行
             * 指定した method 名に対応する Native Class の method を呼び出す。
             *
             * @param success {Function}     [in] success callback
             * @param fail    {Function}     [in] fail callback
             * @param method  {String}       [in] Native Class のメソッド名を指定
             * @param args    {Object[]}     [in] 引数を配列で指定
             * @param options {ExecOptions?} [in] 実行オプションを指定
             * @return task ID {String}
             */
/**
             * \~english
             * Cancel task.
             *
             * @param taskId  {String}       [in] set task ID that returned exec(). if set null, all tasks will be cancelling.
             * @param options {ExecOptions?} [in] set execute options.
             * @param success {Function?}    [in] success callback.
             * @param fail    {Function?}    [in] fail callback.
             *
             * \~japanese
             * タスクのキャンセル
             *
             * @param taskId  {String}       [in] タスク ID を指定. exec() の戻り値. null 指定で全キャンセル
             * @param options {ExecOptions?} [in] 実行オプションを指定
             * @param success {Function?}    [in] success callback
             * @param fail    {Function?}    [in] fail callback
             */
/**
             * \~english
             * Destruction for the instance.
             * release Native class reference. after that, exec() becomes invalid.
             *
             * @param options {ExecOptions?} [in] set execute options.
             * @param success {Function?}    [in] success callback.
             * @param fail    {Function?}    [in] fail callback.
             *
             * \~japanese
             * インスタンスの破棄
             * Native の参照を解除する。以降、exec() は無効となる。
             *
             * @param options {ExecOptions?} [in] 実行オプションを指定
             * @param success {Function?}    [in] success callback
             * @param fail    {Function?}    [in] fail callback
             */
///////////////////////////////////////////////////////////////////////
// public static methods
/**
             * \~english
             * Set priority for "backbutton" event.
             *
             * @param first {Boolean} [in] true: set first priority / false: default.
             *
             * \~japanese
             * "backbutton" イベントを優先設定
             *
             * @param first {Boolean} [in] true: 優先処理 / false: default
             */
///////////////////////////////////////////////////////////////////////
// private methods
// history をすべて cancel 候補に変換
///////////////////////////////////////////////////////////////////////
// private static methods
// オプション初期化用
return d.prototype.exec=function(a,e,f,g,h){var i,j=this,k=d._extend({post:!0,compatible:!1,pluginAction:"execTask"},h),l="execTask"!==k.pluginAction?k.taskId:this._objectId+"-task:"+c.createUUID(),m={feature:this._feature,objectId:this._objectId,taskId:l,method:f,compatible:k.compatible},n=function(a,b,c,d){null!=a&&null!=j._execTaskHistory[a]&&delete j._execTaskHistory[a],null!=b&&(d?setTimeout(function(){b(c)}):b(c))},o=null!=g&&g instanceof Array?g:null==g?[]:[].slice.apply(g);
// すでに dispose されていた場合はエラー
if(o.unshift(m),null==this._objectId)return i=b+"this object is already disposed.",n(null,e,{code:d.ERROR_INVALID_OPERATION,message:i,name:b+"ERROR_INVALID_OPERATION"},k.post),console.error(i),null;
// 引数に null/undefined がある場合はエラー
for(var p=1,q=o.length;q>p;p++)if(null==o[p])return i=b+"invalid arg. (arg["+(p-1)+"] == null)",n(l,e,{code:d.ERROR_INVALID_ARG,message:i,name:b+"ERROR_INVALID_ARG",taskId:l},k.post),console.error(i),l;
// history 管理に追加
// exec 実行
return"execTask"===k.pluginAction&&(this._execTaskHistory[l]=!1),cordova.exec(function(c){j._execTaskHistory[l]?(i=b+"[taskId:"+l+"] is canceled.",n(l,e,{code:d.ERROR_CANCEL,message:i,name:b+"ERROR_CANCEL",taskId:l},k.post),console.log(i)):n(l,a,c,k.post)},function(a){n(l,e,a,k.post)},"NativeBridge",k.pluginAction,o),l},d.prototype.cancel=function(a,b,c,e){var f=d._extend({post:!1},b);f.pluginAction="cancelTask",f.taskId=a,f.compatible=!1,null==a?this._setCancelAll():null!=this._execTaskHistory[a]&&(this._execTaskHistory[a]=!0),this.exec(c,e,null,[],f)},d.prototype.dispose=function(a,b,c){var e=d._extend({post:!1},a);e.pluginAction="disposeTask",e.taskId=null,e.compatible=!1,this._setCancelAll(),this.exec(b,c,null,[],e),this._objectId=null},d.setBackButtonPriority=function(b){a._NativeBridge.Patch.setBackButtonPriority(b)},Object.defineProperty(d,"SUCCESS_OK",{
///////////////////////////////////////////////////////////////////////
// const valiable
// Result code
get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(d,"SUCCESS_PROGRESS",{get:function(){return 1},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_FAIL",{get:function(){return 2},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_CANCEL",{get:function(){return 3},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_INVALID_ARG",{get:function(){return 4},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_NOT_IMPLEMENT",{get:function(){return 5},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_NOT_SUPPORT",{get:function(){return 6},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_INVALID_OPERATION",{get:function(){return 7},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_CLASS_NOT_FOUND",{get:function(){return 8},enumerable:!0,configurable:!0}),Object.defineProperty(d,"ERROR_METHOD_NOT_FOUND",{get:function(){return 9},enumerable:!0,configurable:!0}),d.prototype._setCancelAll=function(){for(var a in this._execTaskHistory)this._execTaskHistory.hasOwnProperty(a)&&(this._execTaskHistory[a]=!0)},d._extend=function(a,b){for(var c in b)a[c]=b[c];return a},d}();a.NativeBridge=d,
///////////////////////////////////////////////////////////////////////
// closure methods
// 既定で backbutton を優先処理に設定
d.setBackButtonPriority(!0)}(b=a.Plugin||(a.Plugin={}))}(CDP||(CDP={})),module.exports=CDP.Plugin.NativeBridge;